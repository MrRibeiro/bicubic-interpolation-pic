Version 3.2 HI-TECH Software Intermediate Code
"396 C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c
[v __npowers_ `Cd ~T0 @X0 -> 0 `x e ]
[v __powers_ `Cd ~T0 @X0 -> 0 `x e ]
"13 ../../../../../../Program Files (x86)/Microchip/xc8/v2.00/pic/include/c99\stdarg.h
[v ___va_start `(*v ~T0 @X0 0 ef ]
[p i ___va_start ]
"16 ../../../../../../Program Files (x86)/Microchip/xc8/v2.00/pic/include/c99\conio.h
[v _putch `(v ~T0 @X0 0 ef1`uc ]
"14 ../../../../../../Program Files (x86)/Microchip/xc8/v2.00/pic/include/c99\stdarg.h
[v ___va_arg `(*v ~T0 @X0 0 ev`*v ]
[p i ___va_arg ]
"402 C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c
[v __tdiv_to_l_ `(ul ~T0 @X0 0 ef2`f`f ]
"400
[v __div_to_l_ `(ul ~T0 @X0 0 ef2`d`d ]
[; ;alltypes.h: 10: typedef void * va_list[1];
[; ;alltypes.h: 15: typedef void * __isoc_va_list[1];
[; ;alltypes.h: 127: typedef unsigned size_t;
[; ;alltypes.h: 145: typedef long ssize_t;
[; ;alltypes.h: 244: typedef long long off_t;
[; ;alltypes.h: 397: typedef struct _IO_FILE FILE;
[; ;c99\stdio.h: 52: typedef union _G_fpos64_t {
[; ;c99\stdio.h: 53: char __opaque[16];
[; ;c99\stdio.h: 54: double __align;
[; ;c99\stdio.h: 55: } fpos_t;
[; ;c99\stdio.h: 57: extern FILE *const stdin;
[; ;c99\stdio.h: 58: extern FILE *const stdout;
[; ;c99\stdio.h: 59: extern FILE *const stderr;
[; ;c99\stdio.h: 65: FILE *fopen(const char *, const char *);
[; ;c99\stdio.h: 66: FILE *freopen(const char *, const char *, FILE *);
[; ;c99\stdio.h: 67: int fclose(FILE *);
[; ;c99\stdio.h: 69: int remove(const char *);
[; ;c99\stdio.h: 70: int rename(const char *, const char *);
[; ;c99\stdio.h: 72: int feof(FILE *);
[; ;c99\stdio.h: 73: int ferror(FILE *);
[; ;c99\stdio.h: 74: int fflush(FILE *);
[; ;c99\stdio.h: 75: void clearerr(FILE *);
[; ;c99\stdio.h: 77: int fseek(FILE *, long, int);
[; ;c99\stdio.h: 78: long ftell(FILE *);
[; ;c99\stdio.h: 79: void rewind(FILE *);
[; ;c99\stdio.h: 81: int fgetpos(FILE *, fpos_t *);
[; ;c99\stdio.h: 82: int fsetpos(FILE *, const fpos_t *);
[; ;c99\stdio.h: 84: size_t fread(void *, size_t, size_t, FILE *);
[; ;c99\stdio.h: 85: size_t fwrite(const void *, size_t, size_t, FILE *);
[; ;c99\stdio.h: 87: int fgetc(FILE *);
[; ;c99\stdio.h: 88: int getc(FILE *);
[; ;c99\stdio.h: 89: int getchar(void);
[; ;c99\stdio.h: 90: int ungetc(int, FILE *);
[; ;c99\stdio.h: 92: int fputc(int, FILE *);
[; ;c99\stdio.h: 93: int putc(int, FILE *);
[; ;c99\stdio.h: 94: int putchar(int);
[; ;c99\stdio.h: 96: char *fgets(char *, int, FILE *);
[; ;c99\stdio.h: 98: char *gets(char *);
[; ;c99\stdio.h: 101: int fputs(const char *, FILE *);
[; ;c99\stdio.h: 102: int puts(const char *);
[; ;c99\stdio.h: 113: int printf(const char *, ...);
[; ;c99\stdio.h: 114: int fprintf(FILE *, const char *, ...);
[; ;c99\stdio.h: 115: int sprintf(char *, const char *, ...);
[; ;c99\stdio.h: 116: int snprintf(char *, size_t, const char *, ...);
[; ;c99\stdio.h: 118: int vprintf(const char *, __isoc_va_list);
[; ;c99\stdio.h: 119: int vfprintf(FILE *, const char *, __isoc_va_list);
[; ;c99\stdio.h: 120: int vsprintf(char *, const char *, __isoc_va_list);
[; ;c99\stdio.h: 121: int vsnprintf(char *, size_t, const char *, __isoc_va_list);
[; ;c99\stdio.h: 123: int scanf(const char *, ...);
[; ;c99\stdio.h: 124: int fscanf(FILE *, const char *, ...);
[; ;c99\stdio.h: 125: int sscanf(const char *, const char *, ...);
[; ;c99\stdio.h: 126: int vscanf(const char *, __isoc_va_list);
[; ;c99\stdio.h: 127: int vfscanf(FILE *, const char *, __isoc_va_list);
[; ;c99\stdio.h: 128: int vsscanf(const char *, const char *, __isoc_va_list);
[; ;c99\stdio.h: 130: void perror(const char *);
[; ;c99\stdio.h: 132: int setvbuf(FILE *, char *, int, size_t);
[; ;c99\stdio.h: 133: void setbuf(FILE *, char *);
[; ;c99\stdio.h: 135: char *tmpnam(char *);
[; ;c99\stdio.h: 136: FILE *tmpfile(void);
[; ;c99\stdio.h: 141: FILE *fmemopen(void *, size_t, const char *);
[; ;c99\stdio.h: 142: FILE *open_memstream(char **, size_t *);
[; ;c99\stdio.h: 143: FILE *fdopen(int, const char *);
[; ;c99\stdio.h: 144: FILE *popen(const char *, const char *);
[; ;c99\stdio.h: 145: int pclose(FILE *);
[; ;c99\stdio.h: 146: int fileno(FILE *);
[; ;c99\stdio.h: 147: int fseeko(FILE *, off_t, int);
[; ;c99\stdio.h: 148: off_t ftello(FILE *);
[; ;c99\stdio.h: 149: int dprintf(int, const char *, ...);
[; ;c99\stdio.h: 150: int vdprintf(int, const char *, __isoc_va_list);
[; ;c99\stdio.h: 151: void flockfile(FILE *);
[; ;c99\stdio.h: 152: int ftrylockfile(FILE *);
[; ;c99\stdio.h: 153: void funlockfile(FILE *);
[; ;c99\stdio.h: 154: int getc_unlocked(FILE *);
[; ;c99\stdio.h: 155: int getchar_unlocked(void);
[; ;c99\stdio.h: 156: int putc_unlocked(int, FILE *);
[; ;c99\stdio.h: 157: int putchar_unlocked(int);
[; ;c99\stdio.h: 158: ssize_t getdelim(char **, size_t *, int, FILE *);
[; ;c99\stdio.h: 159: ssize_t getline(char **, size_t *, FILE *);
[; ;c99\stdio.h: 160: int renameat(int, const char *, int, const char *);
[; ;c99\stdio.h: 161: char *ctermid(char *);
[; ;c99\stdio.h: 169: char *tempnam(const char *, const char *);
[; ;c99\ctype.h: 10: int isalnum(int);
[; ;c99\ctype.h: 11: int isalpha(int);
[; ;c99\ctype.h: 12: int isblank(int);
[; ;c99\ctype.h: 13: int iscntrl(int);
[; ;c99\ctype.h: 14: int isdigit(int);
[; ;c99\ctype.h: 15: int isgraph(int);
[; ;c99\ctype.h: 16: int islower(int);
[; ;c99\ctype.h: 17: int isprint(int);
[; ;c99\ctype.h: 18: int ispunct(int);
[; ;c99\ctype.h: 19: int isspace(int);
[; ;c99\ctype.h: 20: int isupper(int);
[; ;c99\ctype.h: 21: int isxdigit(int);
[; ;c99\ctype.h: 22: int tolower(int);
[; ;c99\ctype.h: 23: int toupper(int);
[; ;alltypes.h: 409: typedef struct __locale_struct * locale_t;
[; ;c99\ctype.h: 43: int isalnum_l(int, locale_t);
[; ;c99\ctype.h: 44: int isalpha_l(int, locale_t);
[; ;c99\ctype.h: 45: int isblank_l(int, locale_t);
[; ;c99\ctype.h: 46: int iscntrl_l(int, locale_t);
[; ;c99\ctype.h: 47: int isdigit_l(int, locale_t);
[; ;c99\ctype.h: 48: int isgraph_l(int, locale_t);
[; ;c99\ctype.h: 49: int islower_l(int, locale_t);
[; ;c99\ctype.h: 50: int isprint_l(int, locale_t);
[; ;c99\ctype.h: 51: int ispunct_l(int, locale_t);
[; ;c99\ctype.h: 52: int isspace_l(int, locale_t);
[; ;c99\ctype.h: 53: int isupper_l(int, locale_t);
[; ;c99\ctype.h: 54: int isxdigit_l(int, locale_t);
[; ;c99\ctype.h: 55: int tolower_l(int, locale_t);
[; ;c99\ctype.h: 56: int toupper_l(int, locale_t);
[; ;c99\ctype.h: 58: int isascii(int);
[; ;c99\ctype.h: 59: int toascii(int);
[; ;alltypes.h: 28: typedef long wchar_t;
[; ;c99\stdlib.h: 23: int atoi (const char *);
[; ;c99\stdlib.h: 24: long atol (const char *);
[; ;c99\stdlib.h: 25: long long atoll (const char *);
[; ;c99\stdlib.h: 26: double atof (const char *);
[; ;c99\stdlib.h: 28: float strtof (const char *, char **);
[; ;c99\stdlib.h: 29: double strtod (const char *, char **);
[; ;c99\stdlib.h: 30: long double strtold (const char *, char **);
[; ;c99\stdlib.h: 36: long strtol (const char *, char **, int);
[; ;c99\stdlib.h: 37: unsigned long strtoul (const char *, char **, int);
[; ;c99\stdlib.h: 38: long long strtoll (const char *, char **, int);
[; ;c99\stdlib.h: 39: unsigned long long strtoull (const char *, char **, int);
[; ;c99\stdlib.h: 41: int rand (void);
[; ;c99\stdlib.h: 42: void srand (unsigned);
[; ;c99\stdlib.h: 52: void abort (void);
[; ;c99\stdlib.h: 53: int atexit (void (*) (void));
[; ;c99\stdlib.h: 54: void exit (int);
[; ;c99\stdlib.h: 55: void _Exit (int);
[; ;c99\stdlib.h: 65: void *bsearch (const void *, const void *, size_t, size_t, int (*)(const void *, const void *));
[; ;c99\stdlib.h: 71: __nonreentrant void qsort (void *, size_t, size_t, int (*)(const void *, const void *));
[; ;c99\stdlib.h: 73: int abs (int);
[; ;c99\stdlib.h: 74: long labs (long);
[; ;c99\stdlib.h: 75: long long llabs (long long);
[; ;c99\stdlib.h: 77: typedef struct { int quot, rem; } div_t;
[; ;c99\stdlib.h: 78: typedef struct { long quot, rem; } ldiv_t;
[; ;c99\stdlib.h: 79: typedef struct { long long quot, rem; } lldiv_t;
[; ;c99\stdlib.h: 81: div_t div (int, int);
[; ;c99\stdlib.h: 82: ldiv_t ldiv (long, long);
[; ;c99\stdlib.h: 83: lldiv_t lldiv (long long, long long);
[; ;c99\stdlib.h: 86: typedef struct { unsigned int quot, rem; } udiv_t;
[; ;c99\stdlib.h: 87: typedef struct { unsigned long quot, rem; } uldiv_t;
[; ;c99\stdlib.h: 88: udiv_t udiv (unsigned int, unsigned int);
[; ;c99\stdlib.h: 89: uldiv_t uldiv (unsigned long, unsigned long);
[; ;c99\stdlib.h: 104: size_t __ctype_get_mb_cur_max(void);
[; ;c99\string.h: 27: void *memcpy (void *, const void *, size_t);
[; ;c99\string.h: 28: void *memmove (void *, const void *, size_t);
[; ;c99\string.h: 29: void *memset (void *, int, size_t);
[; ;c99\string.h: 30: int memcmp (const void *, const void *, size_t);
[; ;c99\string.h: 31: void *memchr (const void *, int, size_t);
[; ;c99\string.h: 33: char *strcpy (char *, const char *);
[; ;c99\string.h: 34: char *strncpy (char *, const char *, size_t);
[; ;c99\string.h: 36: char *strcat (char *, const char *);
[; ;c99\string.h: 37: char *strncat (char *, const char *, size_t);
[; ;c99\string.h: 39: int strcmp (const char *, const char *);
[; ;c99\string.h: 40: int strncmp (const char *, const char *, size_t);
[; ;c99\string.h: 42: int strcoll (const char *, const char *);
[; ;c99\string.h: 43: size_t strxfrm (char *, const char *, size_t);
[; ;c99\string.h: 45: char *strchr (const char *, int);
[; ;c99\string.h: 46: char *strrchr (const char *, int);
[; ;c99\string.h: 48: size_t strcspn (const char *, const char *);
[; ;c99\string.h: 49: size_t strspn (const char *, const char *);
[; ;c99\string.h: 50: char *strpbrk (const char *, const char *);
[; ;c99\string.h: 51: char *strstr (const char *, const char *);
[; ;c99\string.h: 52: char *strtok (char *, const char *);
[; ;c99\string.h: 54: size_t strlen (const char *);
[; ;c99\string.h: 56: char *strerror (int);
[; ;c99\string.h: 65: char *strtok_r (char *, const char *, char **);
[; ;c99\string.h: 66: int strerror_r (int, char *, size_t);
[; ;c99\string.h: 67: char *stpcpy(char *, const char *);
[; ;c99\string.h: 68: char *stpncpy(char *, const char *, size_t);
[; ;c99\string.h: 69: size_t strnlen (const char *, size_t);
[; ;c99\string.h: 70: char *strdup (const char *);
[; ;c99\string.h: 71: char *strndup (const char *, size_t);
[; ;c99\string.h: 72: char *strsignal(int);
[; ;c99\string.h: 73: char *strerror_l (int, locale_t);
[; ;c99\string.h: 74: int strcoll_l (const char *, const char *, locale_t);
[; ;c99\string.h: 75: size_t strxfrm_l (char *, const char *, size_t, locale_t);
[; ;c99\string.h: 80: void *memccpy (void *, const void *, int, size_t);
[; ;c99\stdarg.h: 13: extern void * __va_start(void);
[; ;c99\stdarg.h: 14: extern void * __va_arg(void *, ...);
[; ;c99\errno.h: 10: extern int errno;
[; ;c99\conio.h: 12: extern void init_uart(void);
[; ;c99\conio.h: 14: extern char getch(void);
[; ;c99\conio.h: 15: extern char getche(void);
[; ;c99\conio.h: 16: extern void putch(char);
[; ;c99\conio.h: 17: extern void ungetch(char);
[; ;c99\conio.h: 19: extern __bit kbhit(void);
[; ;c99\conio.h: 23: extern char * cgets(char *);
[; ;c99\conio.h: 24: extern void cputs(const char *);
[; ;alltypes.h: 135: typedef unsigned long uintptr_t;
[; ;alltypes.h: 150: typedef long intptr_t;
[; ;alltypes.h: 166: typedef signed char int8_t;
[; ;alltypes.h: 171: typedef short int16_t;
[; ;alltypes.h: 176: typedef long int32_t;
[; ;alltypes.h: 189: typedef int32_t intmax_t;
[; ;alltypes.h: 197: typedef unsigned char uint8_t;
[; ;alltypes.h: 202: typedef unsigned short uint16_t;
[; ;alltypes.h: 207: typedef unsigned long uint32_t;
[; ;alltypes.h: 225: typedef uint32_t uintmax_t;
[; ;c99\stdint.h: 24: typedef int8_t int_fast8_t;
[; ;c99\stdint.h: 29: typedef int8_t int_least8_t;
[; ;c99\stdint.h: 30: typedef int16_t int_least16_t;
[; ;c99\stdint.h: 31: typedef int32_t int_least32_t;
[; ;c99\stdint.h: 36: typedef uint8_t uint_fast8_t;
[; ;c99\stdint.h: 41: typedef uint8_t uint_least8_t;
[; ;c99\stdint.h: 42: typedef uint16_t uint_least16_t;
[; ;c99\stdint.h: 43: typedef uint32_t uint_least32_t;
[; ;stdint.h: 1: typedef int32_t int_fast16_t;
[; ;stdint.h: 2: typedef int32_t int_fast32_t;
[; ;stdint.h: 3: typedef uint32_t uint_fast16_t;
[; ;stdint.h: 4: typedef uint32_t uint_fast32_t;
[; ;alltypes.h: 48: typedef long double float_t;
[; ;alltypes.h: 53: typedef long double double_t;
[; ;c99\math.h: 46: int __fpclassifyf(float);
[; ;c99\math.h: 97: int __signbitf(float);
[; ;c99\math.h: 149: double acos(double);
[; ;c99\math.h: 150: float acosf(float);
[; ;c99\math.h: 151: long double acosl(long double);
[; ;c99\math.h: 157: double acosh(double);
[; ;c99\math.h: 158: float acoshf(float);
[; ;c99\math.h: 159: long double acoshl(long double);
[; ;c99\math.h: 165: double asin(double);
[; ;c99\math.h: 166: float asinf(float);
[; ;c99\math.h: 167: long double asinl(long double);
[; ;c99\math.h: 173: double asinh(double);
[; ;c99\math.h: 174: float asinhf(float);
[; ;c99\math.h: 175: long double asinhl(long double);
[; ;c99\math.h: 181: double atan(double);
[; ;c99\math.h: 182: float atanf(float);
[; ;c99\math.h: 183: long double atanl(long double);
[; ;c99\math.h: 189: double atan2(double, double);
[; ;c99\math.h: 190: float atan2f(float, float);
[; ;c99\math.h: 191: long double atan2l(long double, long double);
[; ;c99\math.h: 197: double atanh(double);
[; ;c99\math.h: 198: float atanhf(float);
[; ;c99\math.h: 199: long double atanhl(long double);
[; ;c99\math.h: 205: double cbrt(double);
[; ;c99\math.h: 206: float cbrtf(float);
[; ;c99\math.h: 207: long double cbrtl(long double);
[; ;c99\math.h: 213: double ceil(double);
[; ;c99\math.h: 214: float ceilf(float);
[; ;c99\math.h: 215: long double ceill(long double);
[; ;c99\math.h: 221: double copysign(double, double);
[; ;c99\math.h: 222: float copysignf(float, float);
[; ;c99\math.h: 223: long double copysignl(long double, long double);
[; ;c99\math.h: 229: double cos(double);
[; ;c99\math.h: 230: float cosf(float);
[; ;c99\math.h: 231: long double cosl(long double);
[; ;c99\math.h: 237: double cosh(double);
[; ;c99\math.h: 238: float coshf(float);
[; ;c99\math.h: 239: long double coshl(long double);
[; ;c99\math.h: 245: double erf(double);
[; ;c99\math.h: 246: float erff(float);
[; ;c99\math.h: 247: long double erfl(long double);
[; ;c99\math.h: 253: double erfc(double);
[; ;c99\math.h: 254: float erfcf(float);
[; ;c99\math.h: 255: long double erfcl(long double);
[; ;c99\math.h: 261: double exp(double);
[; ;c99\math.h: 262: float expf(float);
[; ;c99\math.h: 263: long double expl(long double);
[; ;c99\math.h: 269: double exp2(double);
[; ;c99\math.h: 270: float exp2f(float);
[; ;c99\math.h: 271: long double exp2l(long double);
[; ;c99\math.h: 277: double expm1(double);
[; ;c99\math.h: 278: float expm1f(float);
[; ;c99\math.h: 279: long double expm1l(long double);
[; ;c99\math.h: 285: double fabs(double);
[; ;c99\math.h: 286: float fabsf(float);
[; ;c99\math.h: 287: long double fabsl(long double);
[; ;c99\math.h: 293: double fdim(double, double);
[; ;c99\math.h: 294: float fdimf(float, float);
[; ;c99\math.h: 295: long double fdiml(long double, long double);
[; ;c99\math.h: 301: double floor(double);
[; ;c99\math.h: 302: float floorf(float);
[; ;c99\math.h: 303: long double floorl(long double);
[; ;c99\math.h: 309: double fma(double, double, double);
[; ;c99\math.h: 310: float fmaf(float, float, float);
[; ;c99\math.h: 311: long double fmal(long double, long double, long double);
[; ;c99\math.h: 317: double fmax(double, double);
[; ;c99\math.h: 318: float fmaxf(float, float);
[; ;c99\math.h: 319: long double fmaxl(long double, long double);
[; ;c99\math.h: 325: double fmin(double, double);
[; ;c99\math.h: 326: float fminf(float, float);
[; ;c99\math.h: 327: long double fminl(long double, long double);
[; ;c99\math.h: 333: double fmod(double, double);
[; ;c99\math.h: 334: float fmodf(float, float);
[; ;c99\math.h: 335: long double fmodl(long double, long double);
[; ;c99\math.h: 341: double frexp(double, int *);
[; ;c99\math.h: 342: float frexpf(float, int *);
[; ;c99\math.h: 343: long double frexpl(long double, int *);
[; ;c99\math.h: 349: double hypot(double, double);
[; ;c99\math.h: 350: float hypotf(float, float);
[; ;c99\math.h: 351: long double hypotl(long double, long double);
[; ;c99\math.h: 357: int ilogb(double);
[; ;c99\math.h: 358: int ilogbf(float);
[; ;c99\math.h: 359: int ilogbl(long double);
[; ;c99\math.h: 365: double ldexp(double, int);
[; ;c99\math.h: 366: float ldexpf(float, int);
[; ;c99\math.h: 367: long double ldexpl(long double, int);
[; ;c99\math.h: 373: double lgamma(double);
[; ;c99\math.h: 374: float lgammaf(float);
[; ;c99\math.h: 375: long double lgammal(long double);
[; ;c99\math.h: 381: long long llrint(double);
[; ;c99\math.h: 382: long long llrintf(float);
[; ;c99\math.h: 383: long long llrintl(long double);
[; ;c99\math.h: 389: long long llround(double);
[; ;c99\math.h: 390: long long llroundf(float);
[; ;c99\math.h: 391: long long llroundl(long double);
[; ;c99\math.h: 397: double log(double);
[; ;c99\math.h: 398: float logf(float);
[; ;c99\math.h: 399: long double logl(long double);
[; ;c99\math.h: 405: double log10(double);
[; ;c99\math.h: 406: float log10f(float);
[; ;c99\math.h: 407: long double log10l(long double);
[; ;c99\math.h: 413: double log1p(double);
[; ;c99\math.h: 414: float log1pf(float);
[; ;c99\math.h: 415: long double log1pl(long double);
[; ;c99\math.h: 421: double log2(double);
[; ;c99\math.h: 422: float log2f(float);
[; ;c99\math.h: 423: long double log2l(long double);
[; ;c99\math.h: 429: double logb(double);
[; ;c99\math.h: 430: float logbf(float);
[; ;c99\math.h: 431: long double logbl(long double);
[; ;c99\math.h: 437: long lrint(double);
[; ;c99\math.h: 438: long lrintf(float);
[; ;c99\math.h: 439: long lrintl(long double);
[; ;c99\math.h: 445: long lround(double);
[; ;c99\math.h: 446: long lroundf(float);
[; ;c99\math.h: 447: long lroundl(long double);
[; ;c99\math.h: 453: double modf(double, double *);
[; ;c99\math.h: 454: float modff(float, float *);
[; ;c99\math.h: 455: long double modfl(long double, long double *);
[; ;c99\math.h: 461: double nan(const char *);
[; ;c99\math.h: 462: float nanf(const char *);
[; ;c99\math.h: 463: long double nanl(const char *);
[; ;c99\math.h: 469: double nearbyint(double);
[; ;c99\math.h: 470: float nearbyintf(float);
[; ;c99\math.h: 471: long double nearbyintl(long double);
[; ;c99\math.h: 477: double nextafter(double, double);
[; ;c99\math.h: 478: float nextafterf(float, float);
[; ;c99\math.h: 479: long double nextafterl(long double, long double);
[; ;c99\math.h: 485: double nexttoward(double, long double);
[; ;c99\math.h: 486: float nexttowardf(float, long double);
[; ;c99\math.h: 487: long double nexttowardl(long double, long double);
[; ;c99\math.h: 498: double pow(double, double);
[; ;c99\math.h: 499: __nonreentrant float powf(float, float);
[; ;c99\math.h: 500: long double powl(long double, long double);
[; ;c99\math.h: 506: double remainder(double, double);
[; ;c99\math.h: 507: float remainderf(float, float);
[; ;c99\math.h: 508: long double remainderl(long double, long double);
[; ;c99\math.h: 514: double remquo(double, double, int *);
[; ;c99\math.h: 515: float remquof(float, float, int *);
[; ;c99\math.h: 516: long double remquol(long double, long double, int *);
[; ;c99\math.h: 522: double rint(double);
[; ;c99\math.h: 523: float rintf(float);
[; ;c99\math.h: 524: long double rintl(long double);
[; ;c99\math.h: 530: double round(double);
[; ;c99\math.h: 531: float roundf(float);
[; ;c99\math.h: 532: long double roundl(long double);
[; ;c99\math.h: 538: double scalbln(double, long);
[; ;c99\math.h: 539: float scalblnf(float, long);
[; ;c99\math.h: 540: long double scalblnl(long double, long);
[; ;c99\math.h: 546: double scalbn(double, int);
[; ;c99\math.h: 547: float scalbnf(float, int);
[; ;c99\math.h: 548: long double scalbnl(long double, int);
[; ;c99\math.h: 554: double sin(double);
[; ;c99\math.h: 555: float sinf(float);
[; ;c99\math.h: 556: long double sinl(long double);
[; ;c99\math.h: 562: double sinh(double);
[; ;c99\math.h: 563: float sinhf(float);
[; ;c99\math.h: 564: long double sinhl(long double);
[; ;c99\math.h: 570: double sqrt(double);
[; ;c99\math.h: 571: float sqrtf(float);
[; ;c99\math.h: 572: long double sqrtl(long double);
[; ;c99\math.h: 578: double tan(double);
[; ;c99\math.h: 579: float tanf(float);
[; ;c99\math.h: 580: long double tanl(long double);
[; ;c99\math.h: 586: double tanh(double);
[; ;c99\math.h: 587: float tanhf(float);
[; ;c99\math.h: 588: long double tanhl(long double);
[; ;c99\math.h: 594: double tgamma(double);
[; ;c99\math.h: 595: float tgammaf(float);
[; ;c99\math.h: 596: long double tgammal(long double);
[; ;c99\math.h: 602: double trunc(double);
[; ;c99\math.h: 603: float truncf(float);
[; ;c99\math.h: 604: long double truncl(long double);
[; ;c99\math.h: 631: extern int signgam;
[; ;c99\math.h: 633: double j0(double);
[; ;c99\math.h: 634: double j1(double);
[; ;c99\math.h: 635: double jn(int, double);
[; ;c99\math.h: 637: double y0(double);
[; ;c99\math.h: 638: double y1(double);
[; ;c99\math.h: 639: double yn(int, double);
[; ;c99\float.h: 8: int __flt_rounds(void);
"12 C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c
[p n 350 ]
"358
[v _dpowers `Cul ~T0 @X0 -> 0 `x s ]
[i _dpowers
:U ..
-> -> -> 1 `i `l `ul
-> -> -> 10 `i `l `ul
-> -> -> 100 `i `l `ul
-> -> -> 1000 `i `l `ul
-> -> -> 10000 `i `l `ul
"360
-> -> 100000 `l `ul
-> -> 1000000 `l `ul
-> -> 10000000 `l `ul
-> -> 100000000 `l `ul
"363
-> -> 1000000000 `l `ul
..
]
[; ;doprnt.c: 358: const static unsigned long dpowers[] = {1, 10, 100, 1000, 10000,
[; ;doprnt.c: 360: 100000, 1000000, 10000000, 100000000,
[; ;doprnt.c: 361: 1000000000
[; ;doprnt.c: 363: };
[; ;doprnt.c: 396: extern const double _powers_[], _npowers_[];
[; ;doprnt.c: 400: extern unsigned long _div_to_l_(double, double);
[; ;doprnt.c: 402: extern unsigned long _tdiv_to_l_(float, float);
"417
[v _fround `(d ~T0 @X0 1 sf1`uc ]
"418
{
[; ;doprnt.c: 416: static double
[; ;doprnt.c: 417: fround(unsigned char prec)
[; ;doprnt.c: 418: {
[e :U _fround ]
"417
[v _prec `uc ~T0 @X0 1 r1 ]
"418
[f ]
[; ;doprnt.c: 421: if(prec>=110)
"421
[e $ ! >= -> _prec `i -> 110 `i 10  ]
[; ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
"422
[e ) * * * .0.5 *U + &U __npowers_ * -> + / -> _prec `ui -> 100 `ui -> 18 `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> + / % -> _prec `ui -> 100 `ui -> 10 `ui -> 9 `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> % -> _prec `ui -> 10 `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 9  ]
[e $U 11  ]
"423
[e :U 10 ]
[; ;doprnt.c: 423: else if(prec > 10)
[e $ ! > -> _prec `i -> 10 `i 12  ]
[; ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
"424
[e ) * * .0.5 *U + &U __npowers_ * -> + / -> _prec `ui -> 10 `ui -> 9 `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> % -> _prec `ui -> 10 `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 9  ]
[e :U 12 ]
"425
[e :U 11 ]
[; ;doprnt.c: 425: return 0.5 * _npowers_[prec];
[e ) * .0.5 *U + &U __npowers_ * -> _prec `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 9  ]
[; ;doprnt.c: 426: }
"426
[e :UE 9 ]
}
"433
[v _scale `(d ~T0 @X0 1 sf1`c ]
"434
{
[; ;doprnt.c: 432: static double
[; ;doprnt.c: 433: scale(signed char scl)
[; ;doprnt.c: 434: {
[e :U _scale ]
"433
[v _scl `c ~T0 @X0 1 r1 ]
"434
[f ]
[; ;doprnt.c: 436: if(scl < 0) {
"436
[e $ ! < -> _scl `i -> 0 `i 14  ]
{
[; ;doprnt.c: 437: scl = -scl;
"437
[e = _scl -> -U -> _scl `i `c ]
[; ;doprnt.c: 438: if(scl>=110)
"438
[e $ ! >= -> _scl `i -> 110 `i 15  ]
[; ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
"439
[e ) * * *U + &U __npowers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 13  ]
[e $U 16  ]
"440
[e :U 15 ]
[; ;doprnt.c: 440: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 17  ]
[; ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(scl%10)];
"441
[e ) * *U + &U __npowers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `uc `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 13  ]
[e :U 17 ]
"442
[e :U 16 ]
[; ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
[e ) *U + &U __npowers_ * -> -> _scl `uc `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 13  ]
"443
}
[e :U 14 ]
[; ;doprnt.c: 443: }
[; ;doprnt.c: 444: if(scl>=110)
"444
[e $ ! >= -> _scl `i -> 110 `i 18  ]
[; ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
"445
[e ) * * *U + &U __powers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `uc `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `uc `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `uc `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 13  ]
[e $U 19  ]
"446
[e :U 18 ]
[; ;doprnt.c: 446: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 20  ]
[; ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(scl%10)];
"447
[e ) * *U + &U __powers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `uc `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `uc `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 13  ]
[e :U 20 ]
"448
[e :U 19 ]
[; ;doprnt.c: 448: return _powers_[(unsigned char)scl];
[e ) *U + &U __powers_ * -> -> _scl `uc `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 13  ]
[; ;doprnt.c: 449: }
"449
[e :UE 13 ]
}
"472
[v _printf `(i ~T0 @X0 1 ev`*Cuc ]
"473
{
[; ;doprnt.c: 463: int
[; ;doprnt.c: 472: printf(const char * f, ...)
[; ;doprnt.c: 473: {
[e :U _printf ]
"472
[v _f `*Cuc ~T0 @X0 1 r0 ]
"473
[f ]
"474
[v _ap `*v ~T0 @X0 -> -> 1 `i `ux a ]
"507
[v _c `uc ~T0 @X0 1 a ]
"509
[v _width `i ~T0 @X0 1 a ]
"512
[v _prec `i ~T0 @X0 1 a ]
"520
[v _flag `us ~T0 @X0 1 a ]
"527
[v _d `uc ~T0 @X0 1 a ]
"528
[v _fval `d ~T0 @X0 1 a ]
"529
[v _eexp `i ~T0 @X0 1 a ]
"535
[u S21 `ul 1 `d 1 ]
[n S21 . vd integ ]
"538
[v _tmpval `S21 ~T0 @X0 1 a ]
"540
[v _val `ul ~T0 @X0 1 a ]
"541
[v _len `ui ~T0 @X0 1 a ]
"542
[v _cp `*Cuc ~T0 @X0 1 a ]
[; ;doprnt.c: 474: va_list ap;
[; ;doprnt.c: 507: char c;
[; ;doprnt.c: 509: int width;
[; ;doprnt.c: 512: int prec;
[; ;doprnt.c: 520: unsigned short flag;
[; ;doprnt.c: 527: char d;
[; ;doprnt.c: 528: double fval;
[; ;doprnt.c: 529: int eexp;
[; ;doprnt.c: 535: union {
[; ;doprnt.c: 536: unsigned long vd;
[; ;doprnt.c: 537: double integ;
[; ;doprnt.c: 538: } tmpval;
[; ;doprnt.c: 540: unsigned long val;
[; ;doprnt.c: 541: unsigned len;
[; ;doprnt.c: 542: const char * cp;
[; ;doprnt.c: 545: *ap = __va_start();
"545
[e = *U &U _ap ( ___va_start ..  ]
[; ;doprnt.c: 548: while((c = *f++)) {
"548
[e $U 23  ]
[e :U 24 ]
{
[; ;doprnt.c: 550: if(c != '%')
"550
[e $ ! != -> _c `ui -> 37 `ui 26  ]
[; ;doprnt.c: 552: {
"552
{
[; ;doprnt.c: 553: (putch(c) );
"553
[e ( _putch (1 _c ]
[; ;doprnt.c: 554: continue;
"554
[e $U 23  ]
"555
}
[e :U 26 ]
[; ;doprnt.c: 555: }
[; ;doprnt.c: 560: flag = 0;
"560
[e = _flag -> -> 0 `i `us ]
[; ;doprnt.c: 654: switch(c = *f++) {
"654
[e $U 28  ]
{
[; ;doprnt.c: 656: case 0:
"656
[e :U 29 ]
[; ;doprnt.c: 657: goto alldone;
"657
[e $U 30  ]
[; ;doprnt.c: 681: case 'f':
"681
[e :U 31 ]
[; ;doprnt.c: 682: flag |= 0x400;
"682
[e =| _flag -> -> 1024 `i `us ]
[; ;doprnt.c: 683: break;
"683
[e $U 27  ]
[; ;doprnt.c: 716: case 'd':
"716
[e :U 32 ]
"717
[e :U 33 ]
[; ;doprnt.c: 717: case 'i':
[; ;doprnt.c: 718: break;
"718
[e $U 27  ]
[; ;doprnt.c: 747: case 's':
"747
[e :U 34 ]
[; ;doprnt.c: 753: cp = (*(const char * *)__va_arg(*(const char * **)ap, (const char *)0));
"753
[e = _cp *U -> ( ___va_arg , (. -> *U -> &U _ap `***Cuc `*v -> -> 0 `i `*Cuc `**Cuc ]
[; ;doprnt.c: 759: if(!cp)
"759
[e $ ! ! != _cp -> -> 0 `i `*Cuc 35  ]
[; ;doprnt.c: 760: cp = "(null)";
"760
[e = _cp :s 1C ]
[e :U 35 ]
[; ;doprnt.c: 796: while(*cp)
"796
[e $U 36  ]
[e :U 37 ]
[; ;doprnt.c: 797: (putch(*cp++) );
"797
[e ( _putch (1 *U ++ _cp * -> -> 1 `i `x -> -> # *U _cp `i `x ]
[e :U 36 ]
"796
[e $ != -> *U _cp `i -> -> -> 0 `i `Cuc `i 37  ]
[e :U 38 ]
[; ;doprnt.c: 798: continue;
"798
[e $U 23  ]
[; ;doprnt.c: 821: default:
"821
[e :U 39 ]
[; ;doprnt.c: 832: continue;
"832
[e $U 23  ]
"841
}
[; ;doprnt.c: 841: }
[e $U 27  ]
"654
[e :U 28 ]
[e [\ = _c *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x , $ -> -> 0 `i `uc 29
 , $ -> -> 102 `ui `uc 31
 , $ -> -> 100 `ui `uc 32
 , $ -> -> 105 `ui `uc 33
 , $ -> -> 115 `ui `uc 34
 39 ]
"841
[e :U 27 ]
[; ;doprnt.c: 844: if(flag & (0x700)) {
"844
[e $ ! != & -> _flag `ui -> -> 1792 `i `ui -> -> 0 `i `ui 40  ]
{
[; ;doprnt.c: 848: prec = 6;
"848
[e = _prec -> 6 `i ]
[; ;doprnt.c: 849: fval = (*(double *)__va_arg(*(double **)ap, (double)0));
"849
[e = _fval *U -> ( ___va_arg , (. -> *U -> &U _ap `**d `*v -> -> 0 `i `d `*d ]
[; ;doprnt.c: 850: if(fval < 0.0) {
"850
[e $ ! < _fval .0.0 41  ]
{
[; ;doprnt.c: 851: fval = -fval;
"851
[e = _fval -U _fval ]
[; ;doprnt.c: 852: flag |= 0x03;
"852
[e =| _flag -> -> 3 `i `us ]
"853
}
[e :U 41 ]
[; ;doprnt.c: 853: }
[; ;doprnt.c: 854: eexp = 0;
"854
[e = _eexp -> 0 `i ]
[; ;doprnt.c: 855: if( fval!=0) {
"855
[e $ ! != _fval -> -> 0 `i `d 42  ]
{
[; ;doprnt.c: 856: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
"856
[e = *U &U _eexp -> - & >> *U -> &U _fval `*ul -> 15 `i -> -> -> 255 `i `l `ul -> -> -> 126 `i `l `ul `i ]
[; ;doprnt.c: 857: eexp--;
"857
[e -- _eexp -> 1 `i ]
[; ;doprnt.c: 858: eexp *= 3;
"858
[e =* _eexp -> 3 `i ]
[; ;doprnt.c: 859: eexp /= 10;
"859
[e =/ _eexp -> -> 10 `uc `i ]
[; ;doprnt.c: 860: if(eexp < 0)
"860
[e $ ! < _eexp -> 0 `i 43  ]
[; ;doprnt.c: 861: eexp--;
"861
[e -- _eexp -> 1 `i ]
[e :U 43 ]
[; ;doprnt.c: 865: tmpval.integ = scale(-eexp);
"865
[e = . _tmpval 1 ( _scale (1 -> -U _eexp `c ]
[; ;doprnt.c: 866: tmpval.integ *= fval;
"866
[e =* . _tmpval 1 _fval ]
[; ;doprnt.c: 867: if(tmpval.integ < 1.0)
"867
[e $ ! < . _tmpval 1 .1.0 44  ]
[; ;doprnt.c: 868: eexp--;
"868
[e -- _eexp -> 1 `i ]
[e $U 45  ]
"869
[e :U 44 ]
[; ;doprnt.c: 869: else if(tmpval.integ >= 10.0)
[e $ ! >= . _tmpval 1 .10.0 46  ]
[; ;doprnt.c: 870: eexp++;
"870
[e ++ _eexp -> 1 `i ]
[e :U 46 ]
"871
[e :U 45 ]
}
[e :U 42 ]
[; ;doprnt.c: 871: }
[; ;doprnt.c: 1131: if(prec <= 12)
"1131
[e $ ! <= _prec -> 12 `i 47  ]
[; ;doprnt.c: 1132: fval += fround((unsigned int)prec);
"1132
[e =+ _fval ( _fround (1 -> -> _prec `ui `uc ]
[e :U 47 ]
[; ;doprnt.c: 1135: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
"1135
[e $ ! || > _eexp -> 9 `i && && != _fval -> -> 0 `i `d == -> _fval `ul -> -> -> 0 `i `l `ul > _eexp -> 1 `i 48  ]
{
[; ;doprnt.c: 1139: if(tmpval.integ < 4.294967296){
"1139
[e $ ! < . _tmpval 1 .4.294967296 49  ]
{
[; ;doprnt.c: 1140: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
"1140
[e =- _eexp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 1 `i `ui `i ]
"1141
}
[; ;doprnt.c: 1141: }else{
[e $U 50  ]
[e :U 49 ]
{
[; ;doprnt.c: 1142: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
"1142
[e =- _eexp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i ]
"1143
}
[e :U 50 ]
[; ;doprnt.c: 1143: }
[; ;doprnt.c: 1144: tmpval.integ = scale(eexp);
"1144
[e = . _tmpval 1 ( _scale (1 -> _eexp `c ]
[; ;doprnt.c: 1145: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_l_(fval,tmpval.integ));
"1145
[e = _val ? == -> # `d `ui -> -> 3 `i `ui : ( __tdiv_to_l_ (2 , -> _fval `f -> . _tmpval 1 `f ( __div_to_l_ (2 , _fval . _tmpval 1 ]
[; ;doprnt.c: 1148: fval = 0.0;
"1148
[e = _fval .0.0 ]
"1149
}
[; ;doprnt.c: 1149: } else {
[e $U 51  ]
[e :U 48 ]
{
[; ;doprnt.c: 1150: val = (unsigned long)fval;
"1150
[e = _val -> _fval `ul ]
[; ;doprnt.c: 1151: fval -= (double)val;
"1151
[e =- _fval -> _val `d ]
[; ;doprnt.c: 1152: eexp = 0;
"1152
[e = _eexp -> 0 `i ]
"1153
}
[e :U 51 ]
[; ;doprnt.c: 1153: }
[; ;doprnt.c: 1155: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
"1155
{
[e = _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 52  ]
[e $U 53  ]
"1156
[e :U 52 ]
[; ;doprnt.c: 1156: if(val < dpowers[c])
[e $ ! < _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux 55  ]
[; ;doprnt.c: 1157: break;
"1157
[e $U 53  ]
[e :U 55 ]
"1155
[e ++ _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 52  ]
[e :U 53 ]
"1194
}
[; ;doprnt.c: 1194: {
{
[; ;doprnt.c: 1207: if(flag & 0x03)
"1207
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 56  ]
[; ;doprnt.c: 1209: (putch('-') );
"1209
[e ( _putch (1 -> -> 45 `ui `uc ]
[e :U 56 ]
"1214
}
[; ;doprnt.c: 1214: }
[; ;doprnt.c: 1215: while(c--) {
"1215
[e $U 57  ]
[e :U 58 ]
{
[; ;doprnt.c: 1219: {
"1219
{
[; ;doprnt.c: 1220: tmpval.vd = val/dpowers[c];
"1220
[e = . _tmpval 0 / _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux ]
[; ;doprnt.c: 1221: tmpval.vd %= 10;
"1221
[e =% . _tmpval 0 -> -> 10 `uc `ul ]
[; ;doprnt.c: 1222: (putch('0' + tmpval.vd) );
"1222
[e ( _putch (1 -> + -> -> 48 `ui `ul . _tmpval 0 `uc ]
"1223
}
"1225
}
[e :U 57 ]
"1215
[e $ != -> -- _c -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 58  ]
[e :U 59 ]
[; ;doprnt.c: 1223: }
[; ;doprnt.c: 1225: }
[; ;doprnt.c: 1226: while(eexp > 0) {
"1226
[e $U 60  ]
[e :U 61 ]
{
[; ;doprnt.c: 1227: (putch('0') );
"1227
[e ( _putch (1 -> -> 48 `ui `uc ]
[; ;doprnt.c: 1228: eexp--;
"1228
[e -- _eexp -> 1 `i ]
"1229
}
[e :U 60 ]
"1226
[e $ > _eexp -> 0 `i 61  ]
[e :U 62 ]
[; ;doprnt.c: 1229: }
[; ;doprnt.c: 1230: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
"1230
[e $ ! > _prec -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i 63  ]
[; ;doprnt.c: 1231: c = (sizeof dpowers/sizeof dpowers[0])-2;
"1231
[e = _c -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `uc ]
[e $U 64  ]
"1232
[e :U 63 ]
[; ;doprnt.c: 1232: else
[; ;doprnt.c: 1233: c = (char)prec;
"1233
[e = _c -> _prec `uc ]
[e :U 64 ]
[; ;doprnt.c: 1234: prec -= (int)c;
"1234
[e =- _prec -> _c `i ]
[; ;doprnt.c: 1238: if(c)
"1238
[e $ ! != -> _c `i -> -> -> 0 `i `uc `i 65  ]
[; ;doprnt.c: 1240: (putch('.') );
"1240
[e ( _putch (1 -> -> 46 `ui `uc ]
[e :U 65 ]
[; ;doprnt.c: 1246: val = (unsigned long)(fval * scale((signed char)c));
"1246
[e = _val -> * _fval ( _scale (1 -> _c `c `ul ]
[; ;doprnt.c: 1247: while(c--) {
"1247
[e $U 66  ]
[e :U 67 ]
{
[; ;doprnt.c: 1248: tmpval.vd = val/dpowers[c];
"1248
[e = . _tmpval 0 / _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux ]
[; ;doprnt.c: 1249: tmpval.vd %= 10;
"1249
[e =% . _tmpval 0 -> -> 10 `uc `ul ]
[; ;doprnt.c: 1250: (putch('0' + tmpval.vd) );
"1250
[e ( _putch (1 -> + -> -> 48 `ui `ul . _tmpval 0 `uc ]
[; ;doprnt.c: 1251: val %= dpowers[c];
"1251
[e =% _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux ]
"1252
}
[e :U 66 ]
"1247
[e $ != -> -- _c -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 67  ]
[e :U 68 ]
[; ;doprnt.c: 1252: }
[; ;doprnt.c: 1254: while(prec) {
"1254
[e $U 69  ]
[e :U 70 ]
{
[; ;doprnt.c: 1255: (putch('0') );
"1255
[e ( _putch (1 -> -> 48 `ui `uc ]
[; ;doprnt.c: 1256: prec--;
"1256
[e -- _prec -> 1 `i ]
"1257
}
[e :U 69 ]
"1254
[e $ != _prec -> 0 `i 70  ]
[e :U 71 ]
[; ;doprnt.c: 1257: }
[; ;doprnt.c: 1264: continue;
"1264
[e $U 23  ]
"1265
}
[e :U 40 ]
[; ;doprnt.c: 1265: }
[; ;doprnt.c: 1272: {
"1272
{
[; ;doprnt.c: 1278: val = (long)(*(int *)__va_arg(*(int **)ap, (int)0));
"1278
[e = _val -> -> *U -> ( ___va_arg , (. -> *U -> &U _ap `**i `*v -> 0 `i `*i `l `ul ]
[; ;doprnt.c: 1280: if((long)val < 0) {
"1280
[e $ ! < -> _val `l -> -> 0 `i `l 72  ]
{
[; ;doprnt.c: 1281: flag |= 0x03;
"1281
[e =| _flag -> -> 3 `i `us ]
[; ;doprnt.c: 1282: val = -val;
"1282
[e = _val -U _val ]
"1283
}
[e :U 72 ]
"1285
}
[; ;doprnt.c: 1283: }
[; ;doprnt.c: 1285: }
[; ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
"1324
{
[e = _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 73  ]
[e $U 74  ]
"1325
[e :U 73 ]
[; ;doprnt.c: 1325: if(val < dpowers[c])
[e $ ! < _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux 76  ]
[; ;doprnt.c: 1326: break;
"1326
[e $U 74  ]
[e :U 76 ]
"1324
[e ++ _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 73  ]
[e :U 74 ]
"1441
}
[; ;doprnt.c: 1441: {
{
[; ;doprnt.c: 1457: if(flag & 0x03)
"1457
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 77  ]
[; ;doprnt.c: 1458: (putch('-') );
"1458
[e ( _putch (1 -> -> 45 `ui `uc ]
[e :U 77 ]
"1488
}
[; ;doprnt.c: 1488: }
[; ;doprnt.c: 1491: prec = c;
"1491
[e = _prec -> _c `i ]
[; ;doprnt.c: 1493: while(prec--) {
"1493
[e $U 78  ]
[e :U 79 ]
{
[; ;doprnt.c: 1497: {
"1497
{
[; ;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
"1508
[e = _c -> + % / _val *U + &U _dpowers * -> -> _prec `ui `ux -> -> # *U &U _dpowers `ui `ux -> -> -> 10 `i `l `ul -> -> 48 `ui `ul `uc ]
"1542
}
[; ;doprnt.c: 1542: }
[; ;doprnt.c: 1543: (putch(c) );
"1543
[e ( _putch (1 _c ]
"1544
}
[e :U 78 ]
"1493
[e $ != -- _prec -> 1 `i -> 0 `i 79  ]
[e :U 80 ]
"1552
}
[e :U 23 ]
"548
[e $ != -> = _c *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `i -> -> -> 0 `i `uc `i 24  ]
[e :U 25 ]
[; ;doprnt.c: 1544: }
[; ;doprnt.c: 1552: }
[; ;doprnt.c: 1554: alldone:
"1554
[e :U 30 ]
[; ;doprnt.c: 1559: return 0;
"1559
[e ) -> 0 `i ]
[e $UE 22  ]
[; ;doprnt.c: 1560: }
"1560
[e :UE 22 ]
}
[a 1C 40 110 117 108 108 41 0 ]

